
*What is FsCheck?*

FsCheck is a tool for testing .NET programs automatically. The programmer provides a specification of the program, in the form of properties which functions, methods or objects should satisfy, and FsCheck then tests that the properties hold in a large number of randomly generated cases. While writing the properties, you are actually writing a testable specification of your program. Specifications are expressed in F#, C# or VB, using combinators defined in the FsCheck library. FsCheck provides combinators to define properties, observe the distribution of test data, and define test data generators. When a property fails, FsCheck automatically displays a minimal counter example.

FsCheck is a port of Haskell's [url:QuickCheck|http://www.cs.chalmers.se/~rjmh/QuickCheck/]. Important parts of the manual for using FsCheck is almost literally "adapted" from the QuickCheck [url:manual|http://www.cs.chalmers.se/~rjmh/QuickCheck/manual.html] and [url:paper|http://www.md.chalmers.se/~koen/Papers/quick.ps]. Any errors and omissions are entirely my responsibility.

Since v0.5, [url:scalacheck|http://code.google.com/p/scalacheck/] has influenced FsCheck as well. Scalacheck is itself a port of QuickCheck to Scala.

FsCheck's generator combinators can be used in any testing framework to easily generate a number of random values for many types, and FsCheck itself integrates nicely with existing unit testing frameworks such as NUnit, xUnit, MSTest and MbUnit.

*Download*

Latest: 	[release:21777]

*Documentation*
(currently F# examples only - please see the source distribution for C# examples)
[QuickStart]
[Properties]
[Test Data Generators]
[Stateful Testing]
[Usage Tips]
(Note: I've changed the output of FsCheck in various ways since writing these docs, so what is shown in the pages above may not correspond exactly to actual output, but the general meaning should be the same. Updating all the examples is a real pain right now.)

*More reading related to FsCheck*
* Matthew Podwysocki has put together an excellent series of blog posts about integrating HUnit, QuickCheck and HPC on the Haskell side, and xUnit, FsCheck and NCover on the F# side. Nice to read if you're interested in an integrated story about testing in F# and/or Haskell:
** [url:Part 1|http://codebetter.com/blogs/matthew.podwysocki/archive/2008/12/05/functional-programming-unit-testing.aspx]
** [url:Part 2|http://codebetter.com/blogs/matthew.podwysocki/archive/2008/12/11/functional-programming-unit-testing-part-2.aspx]
** [url:Part 3|http://codebetter.com/blogs/matthew.podwysocki/archive/2008/12/15/functional-programming-unit-testing-part-3.aspx]
** [url:Part 4|http://codebetter.com/blogs/matthew.podwysocki/archive/2008/12/21/functional-programming-unit-testing-part-4.aspx]
** [url:Part 5|http://codebetter.com/blogs/matthew.podwysocki/archive/2009/01/02/functional-programming-unit-testing-part-5.aspx]
** [url:Part 6|http://codebetter.com/blogs/matthew.podwysocki/archive/2009/01/10/functional-programming-unit-testing-part-6.aspx]
** [url:Using type classes|http://codebetter.com/blogs/matthew.podwysocki/archive/2009/01/20/functional-programming-unit-testing-using-type-classes.aspx]
* Another interesting read about QuickCheck is in [url:Chapter 11|http://book.realworldhaskell.org/read/testing-and-quality-assurance.html] of the excellent [url:Real world Haskell|http://book.realworldhaskell.org] book. The book is freely available online, but do the authors a favor and buy it, it's really worth it  also for F# programmers.
* [url:My blog|http://fortysix-and-two.blogspot.com] for announcements, change logs and other posts more or less related to FsCheck. If you want to contribute, it might be interesting to read [url:A poor man's typeclass|http://fortysix-and-two.blogspot.com/2009/01/poor-man-typeclass.html], which describes a mechanism to simulate Haskell's typeclasses and is used in FsCheck's implementation.